[{"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/index.js":"1","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/App.js":"2","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/reportWebVitals.js":"3","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/index.js":"4","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/about/about.js":"5","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/index.js":"6","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/about/company.js":"7","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/home.js":"8","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/about.js":"9","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/three.js":"10","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/three/index.js":"11","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/components/layouts/circleMenu.js":"12","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/three/planetService.js":"13","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/cube.js":"14","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/cube/index.js":"15","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/littleTokyo.js":"16","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/littleTokyo/index.js":"17","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/pixi.js":"18","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/pixi/index.js":"19"},{"size":513,"mtime":1610187252789,"results":"20","hashOfConfig":"21"},{"size":734,"mtime":1610902058205,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":122,"mtime":1610187758645,"results":"24","hashOfConfig":"21"},{"size":649,"mtime":1610901277714,"results":"25","hashOfConfig":"21"},{"size":390,"mtime":1613927320565,"results":"26","hashOfConfig":"21"},{"size":108,"mtime":1610191173468,"results":"27","hashOfConfig":"21"},{"size":156,"mtime":1610210389140,"results":"28","hashOfConfig":"21"},{"size":302,"mtime":1610191653991,"results":"29","hashOfConfig":"21"},{"size":162,"mtime":1610211697574,"results":"30","hashOfConfig":"21"},{"size":3727,"mtime":1613143745347,"results":"31","hashOfConfig":"21"},{"size":2267,"mtime":1613927399574,"results":"32","hashOfConfig":"21"},{"size":533,"mtime":1613125859511,"results":"33","hashOfConfig":"21"},{"size":164,"mtime":1613139849935,"results":"34","hashOfConfig":"21"},{"size":3346,"mtime":1613205779228,"results":"35","hashOfConfig":"21"},{"size":199,"mtime":1613205658214,"results":"36","hashOfConfig":"21"},{"size":4313,"mtime":1613210180594,"results":"37","hashOfConfig":"21"},{"size":156,"mtime":1613927296264,"results":"38","hashOfConfig":"21"},{"size":1433,"mtime":1613931748511,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"9ujlrz",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/index.js",[],["83","84"],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/App.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/reportWebVitals.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/index.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/about/about.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/index.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/about/company.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/home.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/about.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/three.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/three/index.js",["85","86","87","88","89"],"import { useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport { mashMaterialParams, state } from './planetService.js';\n\nconst ThreePage = () => {\n\n  const [cube, setCube] = useState(null);\n\n  useEffect(() => {\n    run();\n  }, []);\n\n  const container = useRef();\n  \n  const run = () => {\n    let scene, renderer, camera, cube, base, sphere;\n    // let container = document.getElementById('output');\n    // \n    // 初始化場景、渲染器、相機、物體\n    const init = () => {\n      scene = new THREE.Scene();\n      // 建立渲染器\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight); // 場景大小\n      renderer.setClearColor(state.background, 1.0); // 預設背景顏色\n      renderer.shadowMap.enable = true; // 陰影效果\n\n      // 將渲染器的 DOM 綁到網頁上\n      container.current.appendChild(renderer.domElement);\n\n      // 建立相機\n      camera = new THREE.PerspectiveCamera(\n        15,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        300\n      );\n      camera.position.set(40, 8, 15);\n      camera.lookAt(scene.position);\n\n      let cameraControl = new OrbitControls(camera, renderer.domElement);\n\n      cameraControl.enableDamping = true;\n      cameraControl.dampingFactor = 0.25;\n      cameraControl.enableZoom = true;\n\n      // 建立光源\n      let pointLight = new THREE.AmbientLight(0xffffff);\n      pointLight.position.set(1000, 100, -10);\n      scene.add(pointLight);\n\n      // 建立物體\n      const geometry = new THREE.BoxGeometry(1, 1, 1) // 幾何體\n      const baseGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.5) // 幾何體\n      const material = new THREE.MeshPhongMaterial({\n        color: 0x9999ff\n      }); // 材質\n      const baseMaterial = new THREE.MeshPhongMaterial({\n        color: 0xcc0000\n      }); // 材質\n\n      const earthMap = new THREE.TextureLoader().load('/earth.png');\n\n      // Ball\n      const ball = new THREE.SphereGeometry( 5, 32, 32 );\n      const ballMaterial = new THREE.MeshStandardMaterial({\n        // color: 0x016894,\n        transparent: false,\n        metalness: 0.2,\n        opacity: 1,\n        wireframe: false,\n        map: earthMap\n      });\n      const ballMaterial2 = new THREE.MeshStandardMaterial({\n        // color: 0x016894,\n        transparent: false,\n        metalness: 0.2,\n        opacity: 1,\n        wireframe: false,\n        map: earthMap\n      });\n      let bullArr = [ballMaterial, ballMaterial2];\n      const sphere = new THREE.Mesh( ball, bullArr );\n\n      scene.add(sphere);\n\n      //cube = new THREE.Mesh(geometry, material); // 建立網格物件\n      //cube.position.set(0, 1, 0);\n      //cube.rotation.x = 10;\n      //cube.rotation.y = 10;\n      \n      setCube(sphere);\n      //scene.add(cube);\n\n      base = new THREE.Mesh(baseGeometry, baseMaterial); // 建立網格物件\n      base.position.set(0, -0.25, 0);\n      //cube.rotation.x = 10;\n      //cube.rotation.y = 10;\n      // 加入場景\n      scene.add(base);\n    }\n\n    /*const animate = () => {\n      cube.rotation.x += 0.06;\n      cube.rotation.y += 0.01;\n      cube.rotation.z += 0.03;\n    }*/\n\n    const render = () => {\n      // animate();\n      requestAnimationFrame(render);\n      renderer.render(scene, camera);\n    }\n\n    init();\n    render();\n  }\n\n  const animate = () => {\n    cube.rotation.x += 0.06;\n    cube.rotation.y += 0.01;\n    cube.rotation.z += 0.03;\n  }\n\n  return (\n    <main>\n      <div className=\"three-start-button\" onClick={ () => { animate() } }>START</div>\n      <div ref={ container }></div>\n    </main>\n  )\n}\n\nexport default ThreePage;\n","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/components/layouts/circleMenu.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/three/planetService.js",["90","91","92"],"import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nexport const state = {\n  background: 0x1a1a1a\n};\n\nexport const mashMaterialParams = () => {\n  return {\n    color: 0x016894,\n    transparent: false,\n    opacity: 1,\n    wireframe: false\n  }\n};\n\nexport const cubePruducer = () => {\n  // 建立物體\n  const geometry = new THREE.BoxGeometry(1, 1, 1); // 幾何體\n  // 材質\n  const material = new THREE.MeshPhongMaterial(\n    {\n      color: 0x9999ff\n    }\n  ); // 材質\n\n};\n\n","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/cube.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/cube/index.js",["93","94","95","96","97"],"import { useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\n\nfunction CubePage() {\n\n  const [cube, setCube] = useState(null);\n\n  const cubContainer = useRef();\n\n  useEffect(() => {\n    main();\n  }, []);\n\n  const main = () => {\n    let scene, renderer, camera, wall;\n\n    const init = () => {\n      scene = new THREE.Scene();\n      // Renderer building.\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight); // 場景大小\n      renderer.setClearColor(0x1a1a1a, 1.0); // 預設背景顏色\n      renderer.shadowMap.enable = true; // 陰影效果\n\n      // 將渲染器的 DOM 綁到網頁上\n      cubContainer.current.appendChild(renderer.domElement);\n\n      // 建立相機\n      camera = new THREE.PerspectiveCamera(\n        15,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      camera.position.set(20, 20, 40);\n      camera.lookAt(scene.position);\n\n      let cameraControl = new OrbitControls(camera, renderer.domElement);\n\n      cameraControl.enableDamping = true;\n      cameraControl.dampingFactor = 0.25;\n      cameraControl.enableZoom = true;\n\n      // 建立光源\n      let pointLight = new THREE.DirectionalLight(0xffffff, 2);\n      pointLight.position.set(-10, 20, 20)\n      scene.add(pointLight);\n\n      const headMap = new THREE.TextureLoader()\n        .load('/wall.jpg');\n      const skinMap = new THREE.TextureLoader()\n        .load('/wall-3.jpg');\n      const roadMap = new THREE.TextureLoader()\n        .load('/road.jpg');\n      const grassMap = new THREE.TextureLoader()\n        .load('/grass.jpg');\n\n      // 準備頭部與臉的材質\n      const headMaterials = []\n      for (let i = 0; i < 6; i++) {\n        let map\n        if (i === 4) {\n          map = skinMap\n        } else {\n          map = headMap\n        }\n\n        headMaterials.push(new THREE.MeshStandardMaterial({ map: map }))\n      }\n\n      // 建立物體\n      // 牆\n      const geometry = new THREE.BoxGeometry(1, 2, 5); // 幾何體\n      const material = new THREE.MeshStandardMaterial({\n        transparent: false,\n        metalness: 0.1,\n        opacity: 1,\n        wireframe: false,\n        map: headMap\n      }); // 材質\n\n      // 地板\n      const planeGeometry = new THREE.PlaneGeometry(10, 10, 32, 32); // 幾何體\n      const planeMaterial = new THREE.MeshStandardMaterial({\n        transparent: false,\n        metalness: 0.8,\n        opacity: 1,\n        wireframe: false,\n        map: grassMap\n      }); // 材質\n\n      wall = new THREE.Mesh(geometry, headMaterials); // 建立網格物件\n      const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n      wall.position.set(0, 0, 0);\n      plane.position.set(0, -1, 0);\n      plane.rotation.x = -0.5 * Math.PI;\n      scene.add(wall);\n      scene.add(plane);\n      setCube(wall);\n    }\n\n    const render = () => {\n      // animate();\n      requestAnimationFrame(render);\n      renderer.render(scene, camera);\n    }\n\n    init();\n    render();\n  }\n  \n  return (\n    <main>\n      <div ref={ cubContainer }></div>\n    </main>\n  )\n\n}\n\nexport default CubePage;\n","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/littleTokyo.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/littleTokyo/index.js",["98","99","100"],"import { useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\n\nfunction LittleTokyo() {\n\n  const [cube, setCube] = useState(null);\n\n  const cubContainer = useRef();\n\n  useEffect(() => {\n    main();\n  }, []);\n\n  const main = () => {\n    let scene, renderer, camera, wall;\n\n    const init = () => {\n      scene = new THREE.Scene();\n      // Renderer building.\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight); // 場景大小\n      renderer.setClearColor(0x1a1a1a, 1.0); // 預設背景顏色\n      renderer.shadowMap.enable = true; // 陰影效果\n\n      // 將渲染器的 DOM 綁到網頁上\n      cubContainer.current.appendChild(renderer.domElement);\n\n      // 建立相機\n      camera = new THREE.PerspectiveCamera(\n        15,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      camera.position.set(20, 20, 40);\n      camera.lookAt(scene.position);\n\n      let cameraControl = new OrbitControls(camera, renderer.domElement);\n\n      cameraControl.enableDamping = true;\n      cameraControl.dampingFactor = 0.25;\n      cameraControl.enableZoom = true;\n\n      // 建立光源\n      let pointLight = new THREE.AmbientLightProbe(0xffffff, 2);\n      pointLight.position.set(-10, 20, 20)\n      scene.add(pointLight);\n\n      const headMap = new THREE.TextureLoader()\n        .load('/wall.jpg');\n      const skinMap = new THREE.TextureLoader()\n        .load('/wall-3.jpg');\n      const roadMap = new THREE.TextureLoader()\n        .load('/road.jpg');\n      const grassMap = new THREE.TextureLoader()\n        .load('/grass.jpg');\n\n      // 準備頭部與臉的材質\n      const headMaterials = []\n      for (let i = 0; i < 6; i++) {\n        let map\n        if (i === 4) {\n          map = skinMap\n        } else {\n          map = headMap\n        }\n\n        headMaterials.push(new THREE.MeshStandardMaterial({ map: map }))\n      }\n\n      // 建立物體\n      // 牆\n      const geometry = new THREE.BoxGeometry(1, 2, 5); // 幾何體\n      const material = new THREE.MeshStandardMaterial({\n        transparent: false,\n        metalness: 0.1,\n        opacity: 1,\n        wireframe: false,\n        map: headMap\n      }); // 材質\n\n      // 地板\n      const planeGeometry = new THREE.PlaneGeometry(10, 10, 32, 32); // 幾何體\n      const planeMaterial = new THREE.MeshStandardMaterial({\n        transparent: false,\n        metalness: 0.8,\n        opacity: 1,\n        wireframe: false,\n        map: grassMap\n      }); // 材質\n\n      wall = new THREE.Mesh(geometry, headMaterials); // 建立網格物件\n      const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n      wall.position.set(0, 0, 0);\n      plane.position.set(0, -1, 0);\n      plane.rotation.x = -0.5 * Math.PI;\n      // scene.add(wall);\n      // scene.add(plane);\n      \n\n      // envmap\n      const path = '/';\n      const format = '.jpg';\n      const envMap = new THREE.CubeTextureLoader().load( [\n        path + 'posx' + format, path + 'negx' + format,\n        path + 'posy' + format, path + 'negy' + format,\n        path + 'posz' + format, path + 'negz' + format\n      ] );\n      const dracoLoader = new DRACOLoader();\n      dracoLoader.setDecoderPath( '/draco/gltf/' );\n\n      const loader = new GLTFLoader();\n      loader.setDRACOLoader( dracoLoader );\n      loader.load( '/LittlestTokyo.glb', function ( gltf ) {\n        console.log(gltf);\n        const model = gltf.scene;\n        model.position.set( 1, 1, 0 );\n        model.scale.set( 0.01, 0.01, 0.01 );\n        model.traverse( function ( child ) {\n        \n        if ( child.isMesh ) {\n          child.material.envMap = envMap;\n        }\n\n      });\n\n        scene.add( model );\n      }, undefined, function ( e ) {\n\n        console.error( e );\n\n      });\n      setCube(wall);\n    }\n\n    const render = () => {\n      // animate();\n      requestAnimationFrame(render);\n      renderer.render(scene, camera);\n    }\n\n    init();\n    render();\n  }\n  \n  return (\n    <main>\n      <div ref={ cubContainer }></div>\n    </main>\n  )\n\n}\n\nexport default LittleTokyo;\n","/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/router/pixi.js",[],"/Users/yi-chunsung/doc/github_rep/elk-tree-earth/src/pages/pixi/index.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":5,"column":10,"nodeType":"107","messageId":"108","endLine":5,"endColumn":28},{"ruleId":"105","severity":1,"message":"109","line":18,"column":34,"nodeType":"107","messageId":"108","endLine":18,"endColumn":38},{"ruleId":"105","severity":1,"message":"110","line":18,"column":46,"nodeType":"107","messageId":"108","endLine":18,"endColumn":52},{"ruleId":"105","severity":1,"message":"111","line":55,"column":13,"nodeType":"107","messageId":"108","endLine":55,"endColumn":21},{"ruleId":"105","severity":1,"message":"112","line":57,"column":13,"nodeType":"107","messageId":"108","endLine":57,"endColumn":21},{"ruleId":"105","severity":1,"message":"113","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":23},{"ruleId":"105","severity":1,"message":"111","line":19,"column":9,"nodeType":"107","messageId":"108","endLine":19,"endColumn":17},{"ruleId":"105","severity":1,"message":"112","line":21,"column":9,"nodeType":"107","messageId":"108","endLine":21,"endColumn":17},{"ruleId":"105","severity":1,"message":"114","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":20},{"ruleId":"105","severity":1,"message":"115","line":5,"column":10,"nodeType":"107","messageId":"108","endLine":5,"endColumn":21},{"ruleId":"105","severity":1,"message":"116","line":9,"column":10,"nodeType":"107","messageId":"108","endLine":9,"endColumn":14},{"ruleId":"105","severity":1,"message":"117","line":56,"column":13,"nodeType":"107","messageId":"108","endLine":56,"endColumn":20},{"ruleId":"105","severity":1,"message":"112","line":77,"column":13,"nodeType":"107","messageId":"108","endLine":77,"endColumn":21},{"ruleId":"105","severity":1,"message":"116","line":9,"column":10,"nodeType":"107","messageId":"108","endLine":9,"endColumn":14},{"ruleId":"105","severity":1,"message":"117","line":56,"column":13,"nodeType":"107","messageId":"108","endLine":56,"endColumn":20},{"ruleId":"105","severity":1,"message":"112","line":77,"column":13,"nodeType":"107","messageId":"108","endLine":77,"endColumn":21},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'mashMaterialParams' is defined but never used.","Identifier","unusedVar","'cube' is defined but never used.","'sphere' is defined but never used.","'geometry' is assigned a value but never used.","'material' is assigned a value but never used.","'OrbitControls' is defined but never used.","'GLTFLoader' is defined but never used.","'DRACOLoader' is defined but never used.","'cube' is assigned a value but never used.","'roadMap' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]